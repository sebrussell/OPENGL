#version 430 core

// Input per-fragment data
// These must correspond to the varying outputs from the vertex shader
in vec3 vNormalV;
//in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;
in vec2 texCoord;
in mat4 _viewMat;


// Input uniform data - these have values that will be the same for every fragment
uniform vec3 lightColour = {0.8,0.8,0.8};
uniform vec3 emissiveColour = {0,0,0};
//uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {1.0f,1.0f,1.0f};
uniform vec3 specularColour = {1.0f,1.0f,1.0f};
uniform float shininess     = 100.0f;
uniform float alpha         = 1.0f;

uniform vec4 lightPosition[10];
uniform vec3 ambientColour[10];


// The output of the fragment shader is the fragment's colour
out vec4 fragColour;

// This is another input to allow us to access a texture
uniform sampler2D tex1;


void main()
{
	
	vec3 tempAmbient = vec3(0); 
	vec3 diffuse = vec3(0);
	vec3 specular = vec3(0);

	vec3 texColour = vec3(texture(tex1,texCoord));

	for(int i = 0; i < 10; i++)
	{
		vec3 eyeSpaceLightPosV = vec3(_viewMat * lightPosition[i]);

		// Calculate the direction from the sample position to the light
		vec3 lightDir = normalize( eyeSpaceLightPosV - eyeSpaceVertPosV );
		// Ensure the normal is a unit vector
		vec3 normal = normalize( vNormalV );
		// Direction from eye to sample point
		vec3 eyeDir = normalize( -eyeSpaceVertPosV );
		// Vector half way between one to eye and one to light
		vec3 halfVec = normalize( eyeDir + lightDir );

		// Retrieve colour from texture
		
		// Calculate diffuse lighting
		diffuse = diffuseColour * lightColour * max( dot( normal, lightDir ), 0);
	
		// Put specular lighting code here!
		specular = vec3(0);

		// Final colour uses the texture colour for all components
		// If you want a separate texture for specular you will need to change this
		tempAmbient += ambientColour[i];
	}
	fragColour = vec4( emissiveColour + texColour*(tempAmbient + diffuse + specular), alpha);
	//fragColour -= fragColour;
	//fragColour += vec4(ambientColour[2], 1);
	
}
